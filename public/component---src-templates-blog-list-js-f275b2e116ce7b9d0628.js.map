{"version":3,"sources":["webpack://gatsby-starter-default/./src/components/PostItem/styled.js","webpack://gatsby-starter-default/./src/components/PostItem/index.js","webpack://gatsby-starter-default/./src/components/Pagination/styled.js","webpack://gatsby-starter-default/./src/components/Pagination/index.js","webpack://gatsby-starter-default/./src/components/ListWrapper/styled.js","webpack://gatsby-starter-default/./src/templates/blog-list.js"],"names":["PostItemLink","styled","AniLink","PostItemWrapper","media","PostItemTag","props","background","PostItemInfo","PostItemDate","PostItemTitle","PostItemDescription","slug","date","category","timeToRead","title","description","image","cover","direction","bg","getThemeColor","duration","to","PaginationWrapper","isFirst","isLast","currentPage","numPages","prevPage","nextPage","transition","ListWrapper","postList","data","allMarkdownRemark","edges","pageContext","Layout","map","node","frontmatter","fields","PostItem","key"],"mappings":"2OAIaA,GAAeC,QAAOC,KAAV,2EAAGD,CAAH,2IAcZE,EAAkBF,wBAAH,mEAAGA,CAAH,oMAcxBG,cAAe,QAAfA,CAdwB,qHAqBfC,EAAcJ,oBAAH,+DAAGA,CAAH,gQAER,SAACK,GAAD,aAAkBA,EAAMC,WAAxB,MAWZH,cAAe,QAAfA,CAboB,4HAyBXI,EAAeP,oBAAH,gEAAGA,CAAH,8DAKrBG,cAAe,QAAfA,CALqB,2CAUZK,EAAeR,qBAAH,gEAAGA,CAAH,uBAIZS,EAAgBT,mBAAH,iEAAGA,CAAH,2GAWbU,EAAsBV,kBAAH,uEAAGA,CAAH,uDCzChC,EAzCiB,SAAC,GAAD,IACfW,EADe,EACfA,KAEAC,GAHe,EAEfC,SAFe,EAGfD,MACAE,EAJe,EAIfA,WACAC,EALe,EAKfA,MACAC,EANe,EAMfA,YACAC,EAPe,EAOfA,MAPe,OASf,gBAAC,EAAD,CACEC,OAAK,EACLC,UAAU,QACVC,IAAIC,SACJC,SAAU,GACVC,GAAIZ,GAEJ,gBAAC,EAAD,KACE,gBAAC,EAAD,CAAeL,WAAYW,IAE3B,gBAAC,EAAD,KACE,gBAAC,EAAD,KACGL,EADH,MACYE,EADZ,mBAGA,gBAAC,EAAD,KAAkBC,GAClB,gBAAC,EAAD,KAAwBC,Q,qKC5BnBQ,EAAoBxB,wBAAH,iEAAGA,CAAH,mPAQ3BG,cAAe,QAAfA,CAR2B,sECyC9B,EAtCmB,SAAC,GAAD,IACjBsB,EADiB,EACjBA,QACAC,EAFiB,EAEjBA,OACAC,EAHiB,EAGjBA,YACAC,EAJiB,EAIjBA,SACAC,EALiB,EAKjBA,SACAC,EANiB,EAMjBA,SANiB,OAQjB,gBAAC,EAAD,MACIL,GACA,gBAACxB,EAAA,EAAD,CAASsB,GAAIM,EAAUX,OAAK,EAACa,WAAW,MAAMX,GAAG,UAAUE,SAAU,IAClE,IADH,kBAEkB,KAIpB,yBACGK,EADH,OACoBC,IAGlBF,GACA,gBAACzB,EAAA,EAAD,CAASsB,GAAIO,EAAUZ,OAAK,EAACa,WAAW,MAAMX,GAAG,UAAUE,SAAU,IAClE,IADH,iBAEiB,OC3BVU,EAAchC,wBAAH,2DAAGA,CAAH,gMC2FxB,EAnFiB,SAACK,GAChB,IAAM4B,EAAW5B,EAAM6B,KAAKC,kBAAkBC,MADpB,EAGQ/B,EAAMgC,YAAhCV,EAHkB,EAGlBA,YAAaC,EAHK,EAGLA,SACfH,EAA0B,IAAhBE,EACVD,EAASC,IAAgBC,EACzBC,EAAWF,EAAc,GAAM,EAAI,IAAxB,UAAuCA,EAAc,GAChEG,EAAQ,UAAYH,EAAc,GAExC,OACE,gBAACW,EAAA,EAAD,KACE,gBAAC,IAAD,CAAKvB,MAAM,SACX,gBAAC,EAAD,KACGkB,EAASM,KACR,oBACEC,KADF,IAEIC,YACEnC,EAHN,EAGMA,WACAO,EAJN,EAIMA,SACAD,EALN,EAKMA,KACAI,EANN,EAMMA,YACAD,EAPN,EAOMA,MACAE,EARN,EAQMA,MAEFH,EAVJ,EAUIA,WACUH,EAXd,EAWI+B,OAAU/B,KAXd,OAcE,gBAACgC,EAAA,EAAD,CACEC,IAAI,KACJjC,KAAMA,EACNL,WAAYA,EACZO,SAAUA,EACVD,KAAMA,EACNE,WAAYA,EACZC,MAAOA,EACPE,MAAOA,EACPD,YAAaA,QAKrB,gBAAC,EAAD,CACES,QAASA,EACTC,OAAQA,EACRC,YAAaA,EACbC,SAAUA,EACVC,SAAUA,EACVC,SAAUA","file":"component---src-templates-blog-list-js-f275b2e116ce7b9d0628.js","sourcesContent":["import styled from \"styled-components\"\nimport media from \"styled-media-query\"\nimport AniLink from \"gatsby-plugin-transition-link/AniLink\"\n\nexport const PostItemLink = styled(AniLink)`\n  color: var(--texts);\n  display: flex;\n  text-decoration: none;\n\n  body#grid & {\n    background-color: var(--background);\n  }\n\n  &:hover {\n    color: var(--highlight);\n  }\n`\n\nexport const PostItemWrapper = styled.section`\n  align-items: center;\n  border-bottom: 1px solid var(--borders);\n  display: flex;\n  padding: 2rem 3rem;\n  width: 100%;\n\n  body#grid & {\n    border: none;\n    padding: 2rem 1rem;\n    flex-direction: column;\n    justify-content: center;\n  }\n\n  ${media.lessThan(\"large\")`\n    align-items: flex-start;\n    /* flex-direction: column; */\n    padding: 2rem 1rem;\n  `}\n`\n\nexport const PostItemTag = styled.div`\n  align-items: center;\n  background: ${(props) => `url(${props.background})`} no-repeat;\n  background-size: cover;\n  color: var(--white);\n  display: flex;\n  font-size: 1.3rem;\n  font-weight: 700;\n  justify-content: center;\n  min-height: 250px;\n  min-width: 250px;\n  text-transform: uppercase;\n\n  ${media.lessThan(\"large\")`\n    border-radius: 0;\n    font-size: 1rem;\n    padding: .2rem .5rem;\n    margin-right: 1rem;\n  `}\n\n  body#grid & {\n    margin-bottom: 1.5rem;\n  }\n`\n\nexport const PostItemInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-left: 1.5rem;\n\n  ${media.lessThan(\"large\")`\n    margin: 0;\n  `}\n`\n\nexport const PostItemDate = styled.time`\n  font-size: 0.9rem;\n`\n\nexport const PostItemTitle = styled.h1`\n  font-size: 1.6rem;\n  font-weight: 700;\n  margin: 0.2rem 0 0.5rem;\n\n  body#grid & {\n    line-height: 1.1;\n    margin: 0.8rem 0;\n  }\n`\n\nexport const PostItemDescription = styled.p`\n  font-size: 1.2rem;\n  font-weight: 300;\n  line-height: 1.2;\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport getThemeColor from \"../../utils/getThemeColor\"\n\nimport * as S from \"./styled\"\n\nconst PostItem = ({\n  slug,\n  category,\n  date,\n  timeToRead,\n  title,\n  description,\n  image,\n}) => (\n  <S.PostItemLink\n    cover\n    direction=\"right\"\n    bg={getThemeColor()}\n    duration={0.6}\n    to={slug}\n  >\n    <S.PostItemWrapper>\n      <S.PostItemTag background={image}></S.PostItemTag>\n\n      <S.PostItemInfo>\n        <S.PostItemDate>\n          {date} • {timeToRead} min de leitura\n        </S.PostItemDate>\n        <S.PostItemTitle>{title}</S.PostItemTitle>\n        <S.PostItemDescription>{description}</S.PostItemDescription>\n      </S.PostItemInfo>\n    </S.PostItemWrapper>\n  </S.PostItemLink>\n)\n\nPostItem.propTypes = {\n  slug: PropTypes.string.isRequired,\n  background: PropTypes.string,\n  category: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  timeToRead: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  image: PropTypes.string,\n}\n\nexport default PostItem\n","import styled from \"styled-components\";\nimport media from \"styled-media-query\";\n\nexport const PaginationWrapper = styled.section`\n\talign-items: center;\n\tborder-top: 1px solid var(--borders);\n\tcolor: var(--texts);\n\tdisplay: flex;\n\tpadding: 1.5rem 3rem;\n\tjustify-content: space-between;\n\n\t${media.lessThan(\"large\")`\n    font-size: .8rem;\n    padding: 1rem;\n  `}\n\n\ta {\n\t\tcolor: var(--texts);\n\t\ttext-decoration: none;\n\t\ttransition: color 0.5s;\n\n\t\t&:hover {\n\t\t\tcolor: var(--highlight);\n\t\t}\n\t}\n`;\n","import React from \"react\"\nimport propTypes from \"prop-types\"\nimport AniLink from \"gatsby-plugin-transition-link/AniLink\"\n\nimport * as S from \"./styled.js\"\n\nconst Pagination = ({\n  isFirst,\n  isLast,\n  currentPage,\n  numPages,\n  prevPage,\n  nextPage,\n}) => (\n  <S.PaginationWrapper>\n    {!isFirst && (\n      <AniLink to={prevPage} cover transition=\"top\" bg=\"#531B93\" duration={0.6}>\n        {\" \"}\n        Página anterior{\" \"}\n      </AniLink>\n    )}\n\n    <p>\n      {currentPage} de {numPages}\n    </p>\n\n    {!isLast && (\n      <AniLink to={nextPage} cover transition=\"top\" bg=\"#531B93\" duration={0.6}>\n        {\" \"}\n        Próxima página{\" \"}\n      </AniLink>\n    )}\n  </S.PaginationWrapper>\n)\n\nPagination.propTypes = {\n  isFirst: propTypes.bool.isRequired,\n  isLast: propTypes.bool.isRequired,\n  currentPage: propTypes.number.isRequired,\n  numPages: propTypes.number.isRequired,\n  prevPage: propTypes.string,\n  nextPage: propTypes.string,\n}\n\nexport default Pagination\n","import styled from \"styled-components\"\n\nexport const ListWrapper = styled.section`\n  body#grid & {\n    background-color: var(--borders);\n    border-bottom: 1px solid var(--borders);\n    display: grid;\n    display-area: posts;\n    grid-gap: 1px;\n    grid-template-columns: repeat(auto-fit, minmax(380px, 1fr));\n  }\n`\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/Layout\"\nimport Seo from \"../components/seo\"\nimport PostItem from \"../components/PostItem\"\nimport Pagination from \"../components/Pagination\"\n\nimport * as S from \"../components/ListWrapper/styled\"\n\nconst BlogList = (props) => {\n  const postList = props.data.allMarkdownRemark.edges\n\n  const { currentPage, numPages } = props.pageContext\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage = currentPage - 1 === 1 ? \"/\" : `/page/${currentPage - 1}`\n  const nextPage = `/page/${currentPage + 1}`\n\n  return (\n    <Layout>\n      <Seo title=\"Home\" />\n      <S.ListWrapper>\n        {postList.map(\n          ({\n            node: {\n              frontmatter: {\n                background,\n                category,\n                date,\n                description,\n                title,\n                image,\n              },\n              timeToRead,\n              fields: { slug },\n            },\n          }) => (\n            <PostItem\n              key=\"id\"\n              slug={slug}\n              background={background}\n              category={category}\n              date={date}\n              timeToRead={timeToRead}\n              title={title}\n              image={image}\n              description={description}\n            />\n          )\n        )}\n      </S.ListWrapper>\n      <Pagination\n        isFirst={isFirst}\n        isLast={isLast}\n        currentPage={currentPage}\n        numPages={numPages}\n        prevPage={prevPage}\n        nextPage={nextPage}\n      />\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query PostList($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { fields: frontmatter___date, order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            background\n            category\n            date(locale: \"pt-br\", formatString: \"DD [de] MMMM [de] YYYY\")\n            description\n            title\n            image\n          }\n          timeToRead\n          wordCount {\n            words\n          }\n        }\n      }\n    }\n  }\n`\nexport default BlogList\n"],"sourceRoot":""}